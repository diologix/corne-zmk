#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
//#include "../zmk-nodefree-config/helper.h"
//#include "../zmk-nodefree-config/international_chars/german.dtsi"


// Layer Definitions

#define COLEMAK 0
#define QWERTY 1
#define GAMING_COLEMAK 2
#define GAMING_QWERTY 3
#define LAYERS 4
#define NAV 5
#define MOUSE 6
#define MEDIA 7
#define NUM 8
#define SYM 9
#define FN 10

/*
 * helper.h
 *
 * Convenience macros simplifying ZMK's keymap configuration.
 * See https://github.com/urob/zmk-nodefree-config for documentation.
 */

#pragma once

#define ZMK_HELPER_STRINGIFY(x) #x

/* ZMK_BEHAVIOR */

#define ZMK_BEHAVIOR_CORE_caps_word       compatible = "zmk,behavior-caps-word";       #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_dynamic_macro   compatible = "zmk,behavior-dynamic-macro";   #binding-cells = <1>
#define ZMK_BEHAVIOR_CORE_hold_tap        compatible = "zmk,behavior-hold-tap";        #binding-cells = <2>
#define ZMK_BEHAVIOR_CORE_key_repeat      compatible = "zmk,behavior-key-repeat";      #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_macro           compatible = "zmk,behavior-macro";           #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_macro_one_param compatible = "zmk,behavior-macro-one-param"; #binding-cells = <1>
#define ZMK_BEHAVIOR_CORE_macro_two_param compatible = "zmk,behavior-macro-two-param"; #binding-cells = <2>
#define ZMK_BEHAVIOR_CORE_mod_morph       compatible = "zmk,behavior-mod-morph";       #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_sticky_key      compatible = "zmk,behavior-sticky-key";      #binding-cells = <1>
#define ZMK_BEHAVIOR_CORE_tap_dance       compatible = "zmk,behavior-tap-dance";       #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_tri_state       compatible = "zmk,behavior-tri-state";       #binding-cells = <0>

#define ZMK_BEHAVIOR(name, type, ...) \
    / { \
        behaviors { \
            name: name { \
                label = ZMK_HELPER_STRINGIFY(ZB_ ## name); \
                ZMK_BEHAVIOR_CORE_ ## type; \
                __VA_ARGS__ \
            }; \
        }; \
    };

/* ZMK_LAYER */

#define MACRO_CHOOSER3(_1, _2, _3, FUNC, ...) FUNC
#define ZMK_LAYER(...) MACRO_CHOOSER3(__VA_ARGS__, ZMK_LAYER_3_ARGS, ZMK_LAYER_2_ARGS)(__VA_ARGS__)
#define ZMK_LAYER_2_ARGS(name, layout) \
    / { \
        keymap { \
            compatible = "zmk,keymap"; \
            layer_ ## name { \
                label = ZMK_HELPER_STRINGIFY(name); \
                bindings = <layout>; \
            }; \
        }; \
    };
#define ZMK_LAYER_3_ARGS(name, layout, sensors) \
    / { \
        keymap { \
            compatible = "zmk,keymap"; \
            layer_ ## name { \
                label = ZMK_HELPER_STRINGIFY(name); \
                bindings = <layout>; \
                sensor-bindings = <sensors>; \
            }; \
        }; \
    };

/* ZMK_COMBOS */

#define ALL 0xff
#if !defined COMBO_TERM
    #define COMBO_TERM 30
#endif
#if !defined COMBO_HOOK
    #define COMBO_HOOK
#endif

#define MACRO_CHOOSER5(_1, _2, _3, _4, _5, FUNC, ...) FUNC
#define ZMK_COMBO(...) MACRO_CHOOSER5(__VA_ARGS__, ZMK_COMBO_5_ARGS, ZMK_COMBO_4_ARGS)(__VA_ARGS__)
#define ZMK_COMBO_4_ARGS(name, combo_bindings, keypos, combo_layers) \
    ZMK_COMBO_5_ARGS(name, combo_bindings, keypos, combo_layers, COMBO_TERM)
#define ZMK_COMBO_5_ARGS(name, combo_bindings, keypos, combo_layers, combo_timeout) \
    / { \
        combos { \
            compatible = "zmk,combos"; \
            combo_ ## name { \
                timeout-ms = <combo_timeout>; \
                bindings = <combo_bindings>; \
                key-positions = <keypos>; \
                layers = <combo_layers>; \
                COMBO_HOOK \
            }; \
        }; \
    };

/* ZMK_CONDITIONAL_LAYER */

#define ZMK_CONDITIONAL_LAYER(if_layers, then_layer) \
    / { \
        conditional_layers { \
            compatible = "zmk,conditional-layers"; \
            tri_layer { \
                if-layers = <if_layers>; \
                then-layer = <then_layer>; \
            }; \
        }; \
    };

/* ZMK_UNICODE */

#if !defined OS_UNICODE_LEAD
    #if HOST_OS == 2
        #define OS_UNICODE_LEAD &macro_press &kp LALT      // macOS/Windows-Alt-Codes
    #elif HOST_OS == 1
        #define OS_UNICODE_LEAD &macro_tap &kp LS(LC(U))   // Linux
    #else
        #define OS_UNICODE_LEAD &macro_tap &kp RALT &kp U  // Windows + WinCompose (default)
    #endif
#endif
#if !defined OS_UNICODE_TRAIL
    #if HOST_OS == 2
        #define OS_UNICODE_TRAIL &macro_release &kp LALT  // macOS/Windows-Alt-Codes
    #elif HOST_OS == 1
        #define OS_UNICODE_TRAIL &macro_tap &kp SPACE     // Linux
    #else
        #define OS_UNICODE_TRAIL &macro_tap &kp RET       // Windows + WinCompose (default)
    #endif
#endif

#define UC_MACRO(name, unicode_bindings) \
    / { \
        macros { \
            name: name { \
                compatible = "zmk,behavior-macro"; \
                label = ZMK_HELPER_STRINGIFY(UC_MACRO_ ## name); \
                wait-ms = <0>; \
                tap-ms = <0>; \
                #binding-cells = <0>; \
                bindings = <OS_UNICODE_LEAD>, <&macro_tap unicode_bindings>, <OS_UNICODE_TRAIL>; \
            }; \
        }; \
    };

#define UC_MODMORPH(name, uc_binding, shifted_uc_binding) \
    / { \
        behaviors { \
            name: name { \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(UC_MORPH_ ## name); \
                #binding-cells = <0>; \
                bindings = <uc_binding>, <shifted_uc_binding>; \
                mods = <(MOD_LSFT|MOD_RSFT)>; \
            }; \
        }; \
    };

#define ZMK_UNICODE_SINGLE(name, L0, L1, L2, L3) \
    UC_MACRO(name ## _lower, &kp L0 &kp L1 &kp L2 &kp L3) \
    UC_MODMORPH(name, &name ## _lower, &none)

#define ZMK_UNICODE_PAIR(name, L0, L1, L2, L3, U0, U1, U2, U3) \
    UC_MACRO(name ## _lower, &kp L0 &kp L1 &kp L2 &kp L3) \
    UC_MACRO(name ## _upper, &kp U0 &kp U1 &kp U2 &kp U3) \
    UC_MODMORPH(name, &name ## _lower, &name ## _upper)


/*
 * helper.h
 *
 * Convenience macros simplifying ZMK's keymap configuration.
 * See https://github.com/urob/zmk-nodefree-config for documentation.
 */


ZMK_UNICODE_SINGLE(euro_sign, N2, N0, A, C)  // â‚¬


// Behavior configuration

&mt {
    tapping-term-ms = <200>;
    quick_tap_ms = <0>;
    flavor = "tap-preferred";
};

&lt {
    tapping-term-ms = <200>;
    quick_tap_ms = <0>;
    flavor = "tap-preferred";
};

&sk {
    release-after-ms = <500>;
    quick-release;
};

// Keymap configuration (Colemak-DHm)

/ {
    combos {
        compatible = "zmk,combos";

        Escape {
            bindings = <&kp ESC>;
            key-positions = <16 15 14>;
        };

        Control_Combo {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <39 38>;
        };

        Super_Combo {
            bindings = <&kp LEFT_WIN>;
            key-positions = <40 38>;
        };

        ALT_COMBO {
            bindings = <&kp LEFT_ALT>;
            key-positions = <41 38>;
        };

        ComboAffengriff {
            bindings = <&kp LC(LA(DELETE))>;
            key-positions = <14 15 16 19 20 21>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <37 27>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <37 29>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <26 37>;
        };

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <25 37>;
        };

        shift-copy {
            bindings = <&kp LC(LS(C))>;
            key-positions = <36 27>;
        };

        shift-paste {
            bindings = <&kp LC(LS(V))>;
            key-positions = <36 29>;
        };

        control-layer {
            bindings = <&to 7>;
            key-positions = <36 15>;
        };

        to-layer-0 {
            bindings = <&to 0>;
            key-positions = <3 2 4>;
        };

        Umlaut-oe {
            bindings = <&to 7>;
            key-positions = <23 37>;
        };
    };

    macros {
        Umlaut_oe: Umlaut_oe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LEFT_ALT &kp KP_NUMBER_1 &kp KP_NUMBER_4 &kp KP_NUMBER_8 &kt LEFT_ALT>;
            label = "UMLAUT_OE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        L0-colemak-dh-de {
            // -----------------------------------------------------------------------------------------------------------------------------
            // |        |   Q    |   W    |     F     |     P     |     B     | # |     J     |    L     |    U    |    Y   |   '    |     |
            // | LAYERS | A/LGUI | R/LALT |  S/LCTRL  |  T/LSHFT  |     G     | # |     M     | N/LSHFT  | E/LCTRL | I/LALT | O/LGUI |     |
            // |        |   Z    | X/RALT |     C     |     D     |     V     | # |     K     |    H     |    ,    | ./RALT |   /    |     |
            //                            | ESC/MEDIA | SPACE/NAV | TAB/MOUSE | # | ENTER/SYM | BSPC/NUM | DEL/FN  |

            bindings = <
&trans  &kp Q  &kp W  &kp F         &kp P        &kp B          &kp J            &kp L           &kp U      &kp Y       &kp SEMICOLON  &trans
&trans  &kp A  &kp R  &kp S         &kp T        &kp G          &kp M            &kp N           &kp E      &kp I       &kp O          &trans
&trans  &kp Z  &kp X  &kp C         &kp D        &kp V          &kp K            &kp H           &kp COMMA  &kp PERIOD  &kp FSLH       &trans
                      &lt 3 DELETE  &lt 4 SPACE  &lt 5 ENTER    &lt 2 BACKSPACE  &kp LEFT_SHIFT  &lt 1 TAB
            >;
        };

        L1-nav-function {
            // -------------------------------------------------------------------------------------------
            // |     |      |      |       |       |     | # | REDO  | CUT  | COPY | PASTE | UNDO  |     |
            // |     | LGUI | LALT | LCTRL | LSHFT |     | # | CAPS  | LEFT | DOWN | UP    | RIGHT |     |
            // |     |      | RALT |       |       |     | # | INS   | HOME | PGDN | PGUP  | END   |     |
            //                     |       | HELD  |     | # | ENTER | BSPC | DEL  |

            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp LC(LS(C))    &kp LC(X)  &kp LC(C)     &kp LC(V)  &kp LC(LS(V))  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LEFT         &kp DOWN   &kp UP_ARROW  &kp RIGHT  &kp LC(Z)      &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp PRINTSCREEN  &kp HOME   &kp PG_DN     &kp PG_UP  &kp END        &trans
                        &trans  &trans  &trans    &trans           &trans     &trans
            >;
        };

        L2-media {
            // -----------------------------------------------------------------------------------------------------
            // |     |      |      |       |       |      | # | BOOTLOAD | EP_OFF | BR_D   | BR_U   | EP_ON  |     |
            // |     | LGUI | LALT | LCTRL | LSHFT |      | # | RESET    | PREV   | VOL_D  | VOL_U  | NEXT   |     |
            // |     |      | RALT |       |       |      | # | OUT_BLE  | BT_0   | BT_PRV | BT_NXT | BT_CLR |     |
            //                     | HELD  |       |      | # | STOP     | PLAY   | MUTE   |

            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3   &bt BT_SEL 4    &bootloader   &ext_power EP_OFF  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &ext_power EP_ON  &trans
&trans  &kp LGUI      &kp LALT      &kp LCTRL     &kp LSHFT      &bt BT_CLR      &kp C_PREV    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP       &kp C_NEXT            &kp PAUSE_BREAK   &trans
&trans  &trans        &to 0         &to 0         &to 0          &trans          &out OUT_TOG  &kp K_MUTE         &kp C_PLAY_PAUSE      &trans                &trans            &trans
                                    &trans        &kp BACKSPACE  &trans          &trans        &trans             &trans
            >;
        };

        L3-symbols {
            // ------------------------------------------------------------------------------------
            // |     |  {  |  &  |  *  |  (  |  }  | # |      |       |       |      |      |     |
            // |     |  :  |  $  |  %  |  ^  |  +  | # |      | LSHFT | LCTRL | LALT | LGUI |     |
            // |     |  ~  |  !  |  @  |  #  |  |  | # |      |       |       | RALT |      |     |
            //                   |  (  |  )  |  _  | # | HELD |       |       |

            bindings = <
&trans  &trans       &kp EXCLAMATION  &kp DOUBLE_QUOTES  &kp SQT           &kp MINUS            &trans                &trans                 &trans         &trans         &trans         &trans
&trans  &kp TILDE    &kp DLLR         &kp PRCNT          &kp CARET         &kp PIPE             &trans                &kp LSHFT              &kp LCTRL      &kp LEFT_META  &kp LEFT_ALT   &trans
&trans  &kp AT_SIGN  &kp LEFT_BRACE   &kp RIGHT_BRACE    &kp LEFT_BRACKET  &kp RIGHT_BRACKET    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BACKSLASH  &kp RALT       &kp RIGHT_ALT  &trans
                                      &trans             &trans            &trans               &trans                &trans                 &trans
            >;
        };

        L4-Functions {
            bindings = <
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &kp LSHFT    &trans  &trans          &trans            &trans         &trans         &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &kp LCTRL    &trans  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp LEFT_META  &kp LEFT_ALT   &trans
&trans  &kp F12  &kp F7  &kp F8  &kp F9  &kp LALT     &trans  &trans          &trans            &trans         &kp RIGHT_ALT  &trans
                         &trans  &trans  &trans       &trans  &kp BACKSPACE   &trans
            >;
        };

        L5-numbers {
            // -----------------------------------------------------------------------------------
            // |     |  [  |  7  |  8  |  9  |  ]  | # |     |       |       |      |      |     |
            // |     |  ;  |  4  |  5  |  6  |  =  | # |     | LSHFT | LCTRL | LALT | LGUI |     |
            // |     |  `  |  1  |  2  |  3  |  \  | # |     |       |       | RALT |      |     |
            //                   |  .  |  0  |  -  | # |     | HELD  |       |

            bindings = <
&trans  &kp N0           &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PLUS     &trans  &trans     &trans     &trans         &trans        &trans
&trans  &kp KP_NUMBER_0  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp MINUS    &trans  &kp LSHFT  &kp LCTRL  &kp LEFT_META  &kp LEFT_ALT  &trans
&trans  &kp UNDER        &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp EQUAL    &trans  &trans     &trans     &kp RALT       &trans        &trans
                                          &trans           &trans           &trans       &trans  &trans     &trans
            >;
        };

        L6-Applications {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        L7-Control {
            bindings = <
&trans  &trans  &trans  &trans            &trans         &trans          &trans            &trans         &trans         &trans  &trans  &trans
&trans  &trans  &trans  &trans            &trans         &trans          &trans            &trans         &trans         &trans  &euro_sign  &trans
&trans  &trans  &trans  &trans            &trans         &trans          &trans            &trans         &trans         &trans  &trans  &trans
                        &kp LEFT_CONTROL  &kp LEFT_META  &kp LEFT_ALT    &kp LEFT_CONTROL  &kp LEFT_META  &kp RIGHT_ALT
            >;
        };
    };
};
